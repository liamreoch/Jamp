#!/usr/bin/python

'''
	Name:
		jamp (just another music player)

	Description:
		a curses based music player for the OSX terminal.

	Misc:
		audio_types = ['.mp3', '.mp4', '.wav']
		directory = os.walk(os.getcwd()).next()
		children = directory[1]
		files = directory[2]
		directory = directory[0]

		afplay <path/to/song.mp3> &
		killall -STOP afplay
		killall -CONT afplay

		only directories: ls -d */
		only files: ls -p | grep -v /
'''

import sys, os, curses, traceback, string, time, subprocess

playing = False

def format_file_name(songname):
	return "\ ".join(songname.split(" "))

def afplay_running():
	#capture output of prgrep
	process = subprocess.Popen('pgrep afplay', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	#assign to variables for PID and error
	pid, err = process.communicate()
	if pid != '':
		return True

def check_afplay_state():
	if afplay_running():
		state = subprocess.check_output("ps -o state,command | grep '[a]fplay'", shell=True)[0]
		return state

def stop():
	if afplay_running():
		os.system("killall afplay")

def play(songname):
	stop()
	os.system("afplay " + format_file_name(songname) + " &")

def pause():
	if check_afplay_state() == 'S':
		os.system("killall -STOP afplay &")
		screen.addstr(max_y - 2, 1, "Paused track")
	elif check_afplay_state() == 'T':
		os.system("killall -CONT afplay &")
		clear_line(max_y - 2, 1)

current_y, current_x = 0, 0
max_y, max_x = 0, 0
contents_dict = {}

playlist = []

def main(screen):
	global max_y, max_x
	global current_y, current_x
	global contents_dict

	max_y, max_x = screen.getmaxyx()
	current_y, current_x = screen.getyx()
	down = 3

	audio_types = ['.mp3', '.mp4', '.wav']
	directory = os.walk(os.getcwd()).next()
	children = directory[1]
	contents = directory[2]

	directory = directory[0]

	screen.addstr(0, 1, 'jamp playlist', curses.A_BOLD)
	screen.addstr(1, 1, ('-' * (max_x - 2)))
	screen.addstr(2, 1, '../')

	for subdir in children:
		screen.addstr(down, 1, (subdir + '/'))
		down += 1

	for filename in contents:
		if filename[-4:] in audio_types:
			screen.addstr(down, 1, filename)
			contents_dict[down] = filename
			down += 1

	screen.move(2, 1)

	screen.nodelay(1)
	while True:
		key = screen.getch()
		if key == 113:
			stop()
			break # q
		else:
			move_cursor(key)
			curses.doupdate()
		time.sleep(0.1)

def move_cursor(key):
	global current_y, current_x
	current_y, current_x = screen.getyx()
	y_prev, x_prev = current_y, current_x
	if key == curses.KEY_UP or key == curses.KEY_LEFT:
		current_y -= 1
	elif key == curses.KEY_DOWN or key == curses.KEY_RIGHT:
		current_y += 1
	elif key == 10:
		clear_line(max_y - 1, 1)
		if current_y in contents_dict:
			screen.addstr(max_y - 1, 1, "Playing: Artist - %s" % (contents_dict[current_y]))
			play(contents_dict[current_y])

		else:
			screen.addstr(max_y - 1, 1, "Selected Directory")
	elif key == 32:
		pause()
	elif key == 97:
		clear_line(max_y - 2, 1)
		screen.addstr(max_y - 2, 1, "Added song to playlist")
	elif key == 112:
		clear_line(max_y - 2, 1)
		screen.addstr(max_y - 2, 1, "Toggle to playlist")
	elif key == 61:
		clear_line(max_y - 2, 1)
		screen.addstr(max_y - 2, 1, "Increase system volume")
	elif key == 45:
		clear_line(max_y - 2, 1)
		screen.addstr(max_y - 2, 1, "Decrease system volume")
	screen.move(current_y, current_x)
	screen.chgat(y_prev, x_prev, -1, curses.A_NORMAL)
	screen.chgat(current_y, current_x, -1, curses.A_REVERSE)
	screen.refresh()

def clear_line(x_line, y_line):
	screen.move(x_line, y_line)
	screen.clrtoeol()
	screen.move(current_y, current_x)

def add_to_playlist(song):
	# add Song object to Playlist Object
	return None




if __name__=='__main__':
  try:
	screen = curses.initscr()
	curses.noecho()
	curses.cbreak()
	curses.curs_set(1)
	screen.keypad(1)
	main(screen)

	screen.keypad(0)
	curses.echo()
	curses.nocbreak()
	curses.endwin()
  except:
      # In event of error, restore terminal to sane state.
      screen.keypad(0)
      curses.echo()
      curses.nocbreak()
      curses.endwin()
      traceback.print_exc()
